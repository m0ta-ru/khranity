# start from a Ubuntu image AS builder
FROM ubuntu:latest AS builder
# declare incomining arguments
ARG GO_VERSION
# set environment variables
ENV GO_VERSION=${GO_VERSION}
# set environment variables
# to avoid warnings
ENV DEBCONF_NOWARNINGS="yes"
# update and install required packages for further usage
RUN apt-get update && apt-get install -y \
    gcc \
    git \
    wget
# delete unnecessary files
RUN rm -rf /var/lib/apt/lists/*
# download required version of Go
RUN wget -P /tmp "https://dl.google.com/go/go${GO_VERSION}.linux-amd64.tar.gz"
# extract required version of Go
RUN tar -C /usr/local -xzf "/tmp/go${GO_VERSION}.linux-amd64.tar.gz"
# delete unnecessary file
RUN rm "/tmp/go${GO_VERSION}.linux-amd64.tar.gz"
# set required environment variables
ENV GOPATH /go
# set required environment variables
ENV PATH $GOPATH/bin:/usr/local/go/bin:$PATH
# make required directories
RUN mkdir -p "$GOPATH/src" "$GOPATH/bin" && chmod -R 777 "$GOPATH"
# set default directory
WORKDIR /build
# copy the local package files before compiling it
COPY . .
# download and verify all required dependencies
RUN go mod download && go mod verify
# build executable file
RUN go build -o /build/app ./cmd/service/main.go

# start another blank image from the latest version of an Ubuntu image
FROM ubuntu:latest
# contact maintainer with any issues you encounter
LABEL maintainer.name="m0ta" \
      maintainer.email="dev@m0ta.ru"
# set environment variables
# to avoid warnings
ENV DEBCONF_NOWARNINGS="yes"
# update packages and install certificates for clouds
RUN apt-get update && apt-get install -y ca-certificates
# set default directory
WORKDIR /exec
# copy the executable file from the first stage
# into the production image
COPY --from=builder /build/app /exec/app
# run executable file as default command (entrypoint)
ENTRYPOINT ["./app"]